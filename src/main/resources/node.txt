* Thứ tự những nhiệm vụ cần phải làm: 
* Để tạo liên kết giữa 2 bảng dữ liệu phòng ban và nhân viên thì mình sẽ dùng đến @onetomany và @manytoone 
cái này sẽ cần phải nghiên cứu 1 lúc mới được.(Đã thành công)

* Sau khi làm xong cái chức năng đăng nhập với đăng ký thì sẽ chuyển trang đăng nhập sẽ là trang hiển thị đầu tiên
và sau khi đăng nhập thành công thì mới chuyển đến trang chủ (Xong)

* Sửa cái hiện id. (Xong)

* Chức năng bổ sung: Sắp xếp theo tên, id, ...; Phân trang; Xem chi tiết nhân viên, phòng ban; Tìm kiếm nhân viên theo id; 
Tính lương và cật nhật lương, Hiện bảng thông tin các nhân viên trong phòng ban. (Xong)

* Sửa chức năng phân trang, sắp xếp và sửa phòng ban (Xong)

* Làm chức năng đăng nhập và đăng xuất cho người dùng. (Xong)

* Phần tìm kiếm trong lương thì sẽ có cả tìm mã nhân viên, mã lương và tên nhân viên

* Phần tìm kiếm ở trang phòng ban và lương vẫn chưa hoạt động 

* Làm chức năng ghi nhớ thông tin đăng nhập và quên mật khẩu. (Xong)

* Làm phần định dạng tiền tệ cho các trang lương.(Xong)

* Làm phần hiện ảnh nhân viên ở chi tiết phòng ban (Xong)

* Bổ sung footer cho trang web (Đã sửa xong)

Nếu làm thành công nhanh được thì mình sẽ có thể cho thêm các thuộc tính như ảnh, ngày
sinh, quê quán, giới tính, dân tộc, SĐT, chức vụ nữa.

Đã sửa xong phần sắp xếp phòng ban và lương rồi nhung co ve la phan luong con hoi loi
qua.
Code phần tìm kiếm: 
public interface CustomSearchRepository {
    List<Object[]> searchAllEntities(String keyword);
}

public class CustomSearchRepositoryImpl implements CustomSearchRepository {

    @PersistenceContext
    private EntityManager entityManager;

    @Override
    public List<Object[]> searchAllEntities(String keyword) {
        String queryStr = "SELECT e.idnv, e.hoten, e.ngaysinh, e.quequan, e.gt, e.dantoc, e.sdt, e.email, e.chucvu, " +
                          "d.tenpb, d.diachi, d.sdt, " +
                          "s.idluong, s.hsl, " +
                          "u.hoten, u.email " +
                          "FROM Employee e " +
                          "JOIN e.department d " +
                          "JOIN e.salary s " +
                          "JOIN e.user u " +
                          "WHERE e.hoten LIKE :keyword OR e.ngaysinh LIKE :keyword OR e.quequan LIKE :keyword " +
                          "OR e.gt LIKE :keyword OR e.dantoc LIKE :keyword OR e.sdt LIKE :keyword OR e.email LIKE :keyword " +
                          "OR e.chucvu LIKE :keyword OR d.tenpb LIKE :keyword OR d.diachi LIKE :keyword OR d.sdt LIKE :keyword " +
                          "OR s.idluong LIKE :keyword OR s.hsl LIKE :keyword OR u.hoten LIKE :keyword OR u.email LIKE :keyword";
        
        TypedQuery<Object[]> query = entityManager.createQuery(queryStr, Object[].class);
        query.setParameter("keyword", "%" + keyword + "%");

        return query.getResultList();
    }
}

public interface EmployeeRepository extends JpaRepository<Employee, Long>, CustomSearchRepository {
    // Other query methods
}

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    public List<Object[]> searchAll(String keyword) {
        return employeeRepository.searchAllEntities(keyword);
    }
}

@Controller
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping("/search")
    public String search(@RequestParam("keyword") String keyword, Model model) {
        List<Object[]> results = employeeService.searchAll(keyword);
        model.addAttribute("results", results);
        return "searchResults"; // A view to display the results
    }
}


