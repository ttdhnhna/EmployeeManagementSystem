* Thứ tự những nhiệm vụ cần phải làm: 
* Để tạo liên kết giữa 2 bảng dữ liệu phòng ban và nhân viên thì mình sẽ dùng đến @onetomany và @manytoone 
cái này sẽ cần phải nghiên cứu 1 lúc mới được.(Đã thành công)

* Sau khi làm xong cái chức năng đăng nhập với đăng ký thì sẽ chuyển trang đăng nhập sẽ là trang hiển thị đầu tiên
và sau khi đăng nhập thành công thì mới chuyển đến trang chủ

* Sửa cái hiện id. (Xong)

* Chức năng bổ sung: Sắp xếp theo tên, id, ...; Phân trang; Xem chi tiết nhân viên, phòng ban; Tìm kiếm nhân viên theo id; 
Tính lương và cật nhật lương, Hiện bảng thông tin các nhân viên trong phòng ban.

* Sửa chức năng phân trang, sắp xếp và sửa phòng ban (Xong)

* Làm chức năng đăng nhập và đăng xuất cho người dùng.

* Tạo khả năng phân biệt tài khoản admin và user 

* Bổ sung chức năng phân quyền

* Tạo chức năng hiển thị lịch biểu và giao nhiệm vụ cho nhân viên.

* Tạo chức năng nhắn tin.

Ghi chú: Phần tìm kiếm trong lương thì sẽ có cả tìm mã nhân viên, mã lương và tên nhân viên
Đã thêm được phần sửa vs thêm lương ở nhân viên rồi
Giờ sẽ cần chạy thử xem việc thêm, hiện lương
Khong thay dc thuoc tinh idnv o 2 bang luong
va phong ban, phan sua ma luong o nv thi van on va hien len dc.

* Phần tìm kiếm ở trang phòng ban vẫn chưa hoạt động đc nên sẽ để tạm đấy vậy
* khi nào xử lý xong việc hiện danh sách nhân viên trong phòng ban thì sẽ bắt
* đâu xử lý.

Đã làm xong phần cập nhật idnv cho phòng ban rồi, mai sẽ chạy thử xem đã thêm phòng ban độc
lập dược chưa vs có chức năng đã chạy ổn chưa.

Có thử làm thêm phần đăng ký tài khoản mới theo cái vd kia nhưng sẽ bị thiếu phần service, 
tuy là các chức năng sẽ vẫn hoạt động bìn thường nhưng sẽ có 1 vấn đề là khi muốn xử lý đến
logic thì sẽ khá là khó vì gần như không thể xử lý được ở phần controller.

Có thể sẽ phải sửa lại cái phần thuộc tính của phòng ban để lấy được luôn idnv xong sẽ không
cần phải xử lý trong repo và service chỉ cần controller lấy được idpb và truyền vào cái phương
thức đấy là xong.
Department:
package com.practiceproject.EmployeeManagementSystem.entity;

import com.fasterxml.jackson.annotation.JsonManagedReference;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;

import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "tblDepartment")
public class Department {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_pb")
    private Long idpb;

    @OneToMany(mappedBy = "idpb", cascade = CascadeType.ALL)
    @JsonManagedReference
    private Set<Employee> employees;

    private String tenpb;
    private String diachi;
    private String sdt;

    public Department() {
        this.employees = new HashSet<>();
    }

    // Other getters and setters...

    public Set<Employee> getEmployees() {
        return employees;
    }

    public void setEmployees(Set<Employee> employees) {
        this.employees = employees;
    }

    // Method to get all employee IDs for a specific department
    public Set<Long> getAllEmployeeIdsForDepartment(Long departmentId) {
        Set<Long> employeeIds = new HashSet<>();
        for (Employee employee : employees) {
            if (employee.getIdpb().getIdpb().equals(departmentId)) {
                employeeIds.add(employee.getIdnv());
            }
        }
        return employeeIds;
    }
}
