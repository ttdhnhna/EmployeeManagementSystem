* Thứ tự những nhiệm vụ cần phải làm: 
* Để tạo liên kết giữa 2 bảng dữ liệu phòng ban và nhân viên thì mình sẽ dùng đến @onetomany và @manytoone 
cái này sẽ cần phải nghiên cứu 1 lúc mới được.(Đã thành công)

* Sau khi làm xong cái chức năng đăng nhập với đăng ký thì sẽ chuyển trang đăng nhập sẽ là trang hiển thị đầu tiên
và sau khi đăng nhập thành công thì mới chuyển đến trang chủ

* Sửa cái hiện id. (Xong)

* Chức năng bổ sung: Sắp xếp theo tên, id, ...; Phân trang; Xem chi tiết nhân viên, phòng ban; Tìm kiếm nhân viên theo id; 
Tính lương và cật nhật lương, Hiện bảng thông tin các nhân viên trong phòng ban.

* Sửa chức năng phân trang, sắp xếp và sửa phòng ban

* Làm trang mẫu cho người dùng bình thường với thông tin hiện lên trang chủ là thông tin của nhân viên đăng nhập.

* Tạo khả năng phân biệt tài khoản admin và user 

* Bổ sung chức năng phân quyền

* Tạo chức năng hiển thị lịch biểu và giao nhiệm vụ cho nhân viên.

* Tạo chức năng nhắn tin.

Ghi chú: Phần tìm kiếm trong lương thì sẽ có cả tìm mã nhân viên, mã lương và tên nhân viên
Đã thêm được phần sửa vs thêm lương ở nhân viên rồi
Giờ sẽ cần chạy thử xem việc thêm, hiện lương
Khong thay dc thuoc tinh idnv o 2 bang luong
va phong ban, phan sua ma luong o nv thi van on va hien len dc.

Lỗi ở 2 phần sửa và chuyển trang của phòng ban
	 * Sửa lại 2 phần lỗi trên.
	 * Phần tìm kiếm ở trang phòng ban vẫn chưa hoạt động đc nên sẽ để tạm đấy vậy
	 * khi nào xử lý xong việc hiện danh sách nhân viên trong phòng ban thì sẽ bắt
	 * đâu xử lý.

Đã sửa lỗi sửa lương và có xóa đi phần hiện id nv ở trang lương; có làm thêm phần xóa 
và phần phân trang và sx rồi nhưng chưa áp vào trang khi nào chạy thử được cn xóa xong
thì sẽ thêm vào sau. Cần xem lại csdl phần lương xem có hiện thông tin idnv không nếu 
không thì sẽ cần phải sửa lại.

Có làm đc phần repo cho việc lấy danh sách nhân viên cho phòng ban rồi mai sẽ làm cái
phần controller cho nó nhưng sẽ cần chạy thử cái cn ở phần lương vs phần phòng ban đã 
sửa hôm qua trước.

Van con loi phan sua vi cai luc an nut cap nhat sua lai thi no khong bi loi nhung no
khong quay lai trang ma hien dung.(Sai phan save)


Đây là phần code mà mình tìm được trên mạng về cái phần lk 1-n này nhưng đối tượng sẽ khác là
Library: 
package com.hellokoding.jpa.bidirectional;

import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.data.domain.Page;  
import org.springframework.data.domain.Pageable;  
import org.springframework.http.ResponseEntity;  
import org.springframework.web.bind.annotation.*;  
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import javax.validation.Valid;  
import java.net.URI;  
import java.util.Optional;

@RestController
@RequestMapping("/api/v1/libraries")
public class LibraryController {  
    private final LibraryRepository libraryRepository;
    private final BookRepository bookRepository;

    @Autowired
    public LibraryController(LibraryRepository libraryRepository, BookRepository bookRepository) {
        this.libraryRepository = libraryRepository;
        this.bookRepository = bookRepository;
    }

    @PostMapping
    public ResponseEntity<Library> create(@Valid @RequestBody Library library) {
        Library savedLibrary = libraryRepository.save(library);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
            .buildAndExpand(savedLibrary.getId()).toUri();

        return ResponseEntity.created(location).body(savedLibrary);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Library> update(@PathVariable Integer id, @Valid @RequestBody Library library) {
        Optional<Library> optionalLibrary = libraryRepository.findById(id);
        if (!optionalLibrary.isPresent()) {
            return ResponseEntity.unprocessableEntity().build();
        }

        library.setId(optionalLibrary.get().getId());
        libraryRepository.save(library);

        return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Library> delete(@PathVariable Integer id) {
        Optional<Library> optionalLibrary = libraryRepository.findById(id);
        if (!optionalLibrary.isPresent()) {
            return ResponseEntity.unprocessableEntity().build();
        }

        libraryRepository.delete(optionalLibrary.get());

        return ResponseEntity.noContent().build();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Library> getById(@PathVariable Integer id) {
        Optional<Library> optionalLibrary = libraryRepository.findById(id);
        if (!optionalLibrary.isPresent()) {
            return ResponseEntity.unprocessableEntity().build();
        }

        return ResponseEntity.ok(optionalLibrary.get());
    }

    @GetMapping
    public ResponseEntity<Page<Library>> getAll(Pageable pageable) {
        return ResponseEntity.ok(libraryRepository.findAll(pageable));
    }
}

Book: 
package com.hellokoding.jpa.bidirectional;

import org.springframework.beans.factory.annotation.Autowired;  
import org.springframework.data.domain.Page;  
import org.springframework.data.domain.Pageable;  
import org.springframework.http.ResponseEntity;  
import org.springframework.web.bind.annotation.*;  
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import javax.validation.Valid;  
import java.net.URI;  
import java.util.Optional;

@RestController
@RequestMapping("/api/v1/books")
public class BookController {  
    private final BookRepository bookRepository;
    private final LibraryRepository libraryRepository;

    @Autowired
    public BookController(BookRepository bookRepository, LibraryRepository libraryRepository) {
        this.bookRepository = bookRepository;
        this.libraryRepository = libraryRepository;
    }

    @PostMapping
    public ResponseEntity<Book> create(@RequestBody @Valid Book book) {
        Optional<Library> optionalLibrary = libraryRepository.findById(book.getLibrary().getId());
        if (!optionalLibrary.isPresent()) {
            return ResponseEntity.unprocessableEntity().build();
        }

        book.setLibrary(optionalLibrary.get());

        Book savedBook = bookRepository.save(book);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
            .buildAndExpand(savedBook.getId()).toUri();

        return ResponseEntity.created(location).body(savedBook);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Book> update(@RequestBody @Valid Book book, @PathVariable Integer id) {
        Optional<Library> optionalLibrary = libraryRepository.findById(book.getLibrary().getId());
        if (!optionalLibrary.isPresent()) {
            return ResponseEntity.unprocessableEntity().build();
        }

        Optional<Book> optionalBook = bookRepository.findById(id);
        if (!optionalBook.isPresent()) {
            return ResponseEntity.unprocessableEntity().build();
        }

        book.setLibrary(optionalLibrary.get());
        book.setId(optionalBook.get().getId());
        bookRepository.save(book);

        return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Book> delete(@PathVariable Integer id) {
        Optional<Book> optionalBook = bookRepository.findById(id);
        if (!optionalBook.isPresent()) {
            return ResponseEntity.unprocessableEntity().build();
        }

        bookRepository.delete(optionalBook.get());

        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<Page<Book>> getAll(Pageable pageable) {
        return ResponseEntity.ok(bookRepository.findAll(pageable));
    }

    @GetMapping("/{id}")
    public ResponseEntity<Book> getById(@PathVariable Integer id) {
        Optional<Book> optionalBook = bookRepository.findById(id);
        if (!optionalBook.isPresent()) {
            return ResponseEntity.unprocessableEntity().build();
        }

        return ResponseEntity.ok(optionalBook.get());
    }
}

Nên sẽ cần phải sửa lại khá nhiều ở 2 controller của nhân viên và phòng ban đấy.
Còn đâu thì có chỉnh lại cái phần sửa lương rồi giờ sẽ chạy thử xem ổn ko rồi sẽ làm
phần phân trang và sx.
